package jw.data;
import java.sql.*;
import java.util.*;

import jw.core.*;
import static jw.core.MudMain.*;

/**
	The Database class includes authentication information and methods to connect
	to the database, as well as all database interaction for all data.
*/
public class Database
{
	private static String dbUrl = "jdbc:mysql://localhost:3306";
	private static String dbName = "AgapeMUD";
	private static String dbUser = "agapemud";
	private static String dbPass = "hfAKs2m397eu";
	private static Connection dbCon;
	public static Statement dbQuery;

	public static void refreshDb()
	{
		try
		{
			dbQuery.executeQuery("SHOW TABLES");
		} catch (Exception e) {
			sysLog("bugs", "Error in refreshDb: "+e.getMessage());
			logException(e);
			try {
				Class.forName("com.mysql.jdbc.Driver");
				dbCon = DriverManager.getConnection(dbUrl+"/"+dbName, dbUser, dbPass);
				dbQuery = dbCon.createStatement();
				sysLog("bugs", "Database connection re-established.");
			} catch (Exception e2) {
				dbCon = null;
				dbQuery = null;
			}
		}
	}

	public static void loadGlobals()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM globals WHERE global_name LIKE 'globalvars'");
			
			if (dbResult.next())
			{
				String tempVariables = dbResult.getString("global_value");
				for (String s : tempVariables.split(";"))
				{
					String tempVar[] = s.replace("SPECSEMICOLON", ";").split("=", 2);
					if (tempVar.length > 1)
						globals.put(tempVar[0], tempVar[1]);
				}
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadGlobals: "+e.getMessage());
			logException(e);
		}
	}

	public static void saveGlobals()
	{
		String vString = "";
		for (String s : globals.keySet())
			vString = vString+s.replace(";", "SPECSEMICOLON")+"="+globals.get(s).replace(";", "SPECSEMICOLON")+";";
		
		try
		{
			dbQuery.executeUpdate("UPDATE globals SET global_value = '"+dbSafe(vString)+"' WHERE global_name LIKE 'globalvars'");
		} catch (Exception e) {
			sysLog("bugs", "Error in saveGlobals: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Check a given username/password combination in the database.
	
	@param username The case-insensitive username to check.
	@param password The case-sensitive password to check.
	@return The user_id if it is valid, 0 otherwise.
	*/
	public static boolean checkLogin(String username, String password)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM users, characters"+
					" WHERE characters.character_user = users.user_id"+
					" AND characters.character_name LIKE '"+dbSafe(username)+"'"+
					" AND users.user_pass LIKE PASSWORD('"+dbSafe(password)+"')");
			if (dbResult.next())
				return true;
			else
				return false;
		} catch (Exception e) {
			return false;
		}
	}
	
	/**
	Create an account and set the password to {@code newPass}, then return its ID.
	
	@param newPass The password to set on the new account.
	@return The ID of the new account, generated by and obtained from the database.
	*/
	public static int newAccount(String newPass)
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO users VALUES (NULL,"+
					" PASSWORD('"+dbSafe(newPass)+
					"'), 0, "+(System.currentTimeMillis()/1000)+", "+(System.currentTimeMillis()/1000)+", '', '', '', '', '', '', '', DEFAULT, '', '', '', 0, 0, '', 0, '', '', DEFAULT, DEFAULT, DEFAULT, 0, '', '', '', '', '')");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(user_id) AS new_id FROM users");
			dbResult.next();
			return dbResult.getInt("new_id");
		} catch (Exception e) {
			sysLog("bugs", "Error in createAccount: "+e.getMessage());
			logException(e);
		}
		return 0;
	}
	
	/**
	Load an account from the database using information in the given UserCon object.
	<p>
	The user is looked up using the character name they provided at login. Using that,
	all other information is loaded into the UserCon object from the database.
	
	@param c The user to load data into.
	*/
	public static void loadAccount(UserCon c, String name)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM users, characters"+
					" WHERE characters.character_user = users.user_id"+
					" AND characters.character_name LIKE '"+dbSafe(name)+"'");
			
			if (!dbResult.next())
				return;
			c.isDummy = false;

			c.id = dbResult.getInt("user_id");
			c.timePlayed = dbResult.getLong("user_timeplayed");
			c.lastConnected = dbResult.getLong("user_lastconnected");
			c.joined = dbResult.getLong("user_joined");
			c.host1 = dbResult.getString("user_host1");
			c.host2 = dbResult.getString("user_host2");
			c.host3 = dbResult.getString("user_host3");
			
			String lastReads[] = dbResult.getString("user_board_last_read").split(";");
			for (String s : lastReads)
			{
				String lastSplit[] = s.split(":");
				if (lastSplit.length != 2)
					continue;
				Board tempBoard = Board.lookup(Fmt.getInt(lastSplit[0]));
				if (tempBoard == null)
					continue;
				c.lastRead.put(tempBoard, (long)Fmt.getInt(lastSplit[1]));
			}
			for (Board b : boards)
				if (c.lastRead.get(b) == null)
					c.lastRead.put(b, (long)0);

			String aliases[] = dbResult.getString("user_aliases").split(";");
			for (String a : aliases)
				if (a.length() > 0)
					c.aliases.add(a.replace("SPECSEMICOLON", ";"));

			String colorcodes[] = dbResult.getString("user_colors").split(";");
			for (String cr : colorcodes)
				if (cr.length() > 0)
					c.colors.add(cr);

			String chans[] = dbResult.getString("user_chans_off").split(";");
			for (String ch : chans)
				if (ch.length() > 0)
					c.chansOff.add(ch);
				
			String permissions[] = dbResult.getString("user_permissions").split(";");
			for (String p : permissions)
				if (p.length() > 0)
					c.permissions.add(p);

			String granted[] = dbResult.getString("user_granted").split(";");
			for (String g : granted)
				if (g.length() > 0)
					c.granted.add(g);

			String revoked[] = dbResult.getString("user_revoked").split(";");
			for (String r : revoked)
				if (r.length() > 0)
					c.revoked.add(r);

			String ignoring[] = dbResult.getString("user_ignoring").split(";");
			for (String i : ignoring)
				if (i.length() > 0)
					c.ignoring.add(i);
			
			c.role = dbResult.getString("user_role");
			c.prevExp = dbResult.getInt("user_prevexp");

			if (dbResult.getInt("user_troubled") > 0)
				c.troubled = true;
			else
				c.troubled = false;

			if (dbResult.getInt("user_logged") > 0)
				c.logged = true;
			else
				c.logged = false;

			c.prompt = dbResult.getString("user_prompt");
			c.bprompt = dbResult.getString("user_bprompt");
			c.realname = dbResult.getString("user_realname");
			c.email = dbResult.getString("user_email");
			c.pageLength = dbResult.getInt("user_pref_pageLength");
			c.timeAdj = dbResult.getInt("user_timeadj");

			String pString = dbResult.getString("user_prefs");
			for (String s : Flags.userPrefs)
				if (pString.indexOf(";"+s+";") > -1 || pString.startsWith(s+";"))
					c.prefs.put(s, true);
				else
					c.prefs.put(s, false);

			String staffLogs[] = dbResult.getString("user_staff_logs").split(";");
			for (String l : staffLogs)
				if (l.length() > 0)
					c.staffLogs.add(l);

			String beeps[] = dbResult.getString("user_beeps").split(";");
			for (String a : beeps)
				if (a.length() > 0)
					c.beeps.add(a.replace("SPECSEMICOLON", ";"));
			
			c.poofin = dbResult.getString("user_poofin");
			c.poofout = dbResult.getString("user_poofout");

		} catch (Exception e) {
			sysLog("bugs", "Error in loadAccount: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Save an account to the database using its ID.
	
	@param c The user to save.
	*/
	public static void saveAccount(UserCon c)
	{
		String bString = "";
		for (Board b : c.lastRead.keySet())
			bString = bString+b.id+":"+c.lastRead.get(b)+";";

		String aString = "";
		for (String a : c.aliases)
			aString = aString+a.replace(";", "SPECSEMICOLON")+";";

		String cString = "";
		for (String cr : c.colors)
			cString = cString+cr+";";
			
		String hString = "";
		for (String ch : c.chansOff)
			hString = hString+ch+";";

		String pString = "";
		for (String p : c.permissions)
			pString = pString+p+";";
			
		String gString = "";
		for (String g : c.granted)
			gString = gString+g+";";
			
		String rString = "";
		for (String r : c.revoked)
			rString = rString+r+";";

		String iString = "";
		for (String i : c.ignoring)
			iString = iString+i+";";
			
		String prString = "";
		for (String s : c.prefs.keySet())
			if (c.prefs.get(s))
				prString = prString+s+";";
		
		String tString = "0";
		if (c.troubled)
			tString = "1";
		
		String oString = "0";
		if (c.logged)
			oString = "1";

		String lString = "";
		for (String l : c.staffLogs)
			lString = lString+l+";";

		String eString = "";
		for (String a : c.beeps)
			eString = eString+a.replace(";", "SPECSEMICOLON")+";";

		try
		{
			dbQuery.executeUpdate("UPDATE users SET user_timeplayed = "+c.timePlayed+
					", user_lastconnected = "+c.lastConnected+
					", user_host1 = '"+dbSafe(c.host1)+
					"', user_host2 = '"+dbSafe(c.host2)+
					"', user_host3 = '"+dbSafe(c.host3)+
					"', user_board_last_read = '"+dbSafe(bString)+
					"', user_aliases = '"+dbSafe(aString)+
					"', user_colors = '"+dbSafe(cString)+
					"', user_chans_off = '"+dbSafe(hString)+
					"', user_permissions = '"+dbSafe(pString)+
					"', user_granted = '"+dbSafe(gString)+
					"', user_revoked = '"+dbSafe(rString)+
					"', user_ignoring = '"+dbSafe(iString)+
					"', user_role = '"+dbSafe(c.role)+
					"', user_prevexp = "+c.prevExp+
					", user_troubled = "+tString+
					", user_logged = "+oString+
					", user_prompt = '"+dbSafe(c.prompt)+
					"', user_bprompt = '"+dbSafe(c.bprompt)+
					"', user_realname = '"+dbSafe(c.realname)+
					"', user_email = '"+dbSafe(c.email)+
					"', user_pref_pageLength = "+c.pageLength+
					", user_timeadj = "+c.timeAdj+
					", user_prefs = '"+dbSafe(prString)+"', "+
					"user_staff_logs = '"+dbSafe(lString)+"', "+
					"user_beeps = '"+dbSafe(eString)+"', "+
					"user_poofin = '"+dbSafe(c.poofin)+"', "+
					"user_poofout = '"+dbSafe(c.poofout)+"' "+
					"WHERE user_id = "+c.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveAccount: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void deleteAccount(UserCon c)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM users WHERE user_id = "+c.id);
			dbQuery.executeUpdate("DELETE FROM characters WHERE character_user = "+c.id);
			for (ObjData ob : c.ch.objects)
				deleteObject(ob);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteAccount: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void deleteObject(ObjData o)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM objects WHERE object_id = "+o.id);
			for (ObjData ob : o.objects)
				deleteObject(ob);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteObject: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Set a new password for a user.
	<p>
	Since Agape uses MySQL's PASSWORD() function to encrypt passwords, this method
	is necessary to change passwords.
	
	@param c The user whose password the method is changing.
	@param newPass The new value to set the password to.
	*/
	public static void setPassword(UserCon c, String newPass)
	{
		try
		{
			dbQuery.executeUpdate("UPDATE users"+
					" SET user_pass = PASSWORD('"+dbSafe(newPass)+
					"') WHERE user_id = "+c.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in setPassword: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Check to see if a given name already exists in the database.
	<p>
	This is used to avoid name conflicts during character creation, and also to inform
	the user that the name they've tried to log in as doesn't exist.
	
	@param name The name to check for.
	@return {@code true} if the name exists; {@code false} otherwise.
	*/
	public static boolean nameTaken(String name)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM characters"+
					" WHERE character_name LIKE '"+dbSafe(name)+"'");
			if (dbResult.next())
				return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in nameTaken: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	
	public static void saveCharObjects(CharData ch)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM objects WHERE object_character = "+ch.id);
			for (ObjData o : ch.objects)
				saveObject(o);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveCharObjects: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void loadCharObjects(CharData ch)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM objects"+
					" WHERE object_character = "+ch.id+
					" ORDER BY object_id");
			while (dbResult.next())
			{
				ObjData newObj = new ObjData(dbResult.getInt("object_id"));
				newObj.op = ObjProto.lookup(dbResult.getInt("object_proto"));
				if (newObj.op == null)
					newObj.op = objProtos.get(0);
				newObj.name = dbResult.getString("object_name");
				newObj.shortName = dbResult.getString("object_short");
				newObj.longName = dbResult.getString("object_long");
				newObj.description = dbResult.getString("object_description");

				String dString = dbResult.getString("object_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newObj.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}

				String tempTriggers = dbResult.getString("object_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.oprog = ObjProg.lookup(Fmt.getInt(s));
							if (tempTrigger.oprog != null)
								newObj.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}

				newObj.level = dbResult.getInt("object_level");
				newObj.cost = dbResult.getInt("object_cost");
				newObj.decay = dbResult.getInt("object_decay");
				newObj.lastTouched = dbResult.getInt("object_last_touched");
				newObj.material = dbResult.getString("object_material");
				newObj.type = dbResult.getString("object_type");

				String fString = dbResult.getString("object_flags");
				for (String s : Flags.objFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newObj.flags.put(s, true);

				String eString[] = dbResult.getString("object_effects").split(";");
				for (String ef : eString)
				{
					String part[] = ef.split("\\|");
					if (part.length < 3)
						continue;
					Effect newE = new Effect(part[0], Fmt.getInt(part[1]), Fmt.getInt(part[2]));
					for (ctr = 3; part.length > ctr; ctr++)
					{
						String subpart[] = part[ctr].split("=");
						if (subpart.length == 2)
							newE.statMods.put(subpart[0], Fmt.getInt(subpart[1]));
					}
					newObj.effects.add(newE);
				}

				newObj.setTypeFlags(dbResult.getString("object_typeflags"));
				newObj.value1 = dbResult.getString("object_value1");
				newObj.value2 = dbResult.getString("object_value2");
				newObj.value3 = dbResult.getString("object_value3");
				newObj.value4 = dbResult.getString("object_value4");
				newObj.value5 = dbResult.getString("object_value5");
				
				String sString = dbResult.getString("object_statmods");
				for (String s : sString.split(";"))
				{
					String leftRight[] = s.split(":");
					if (leftRight.length == 2)
						if (Fmt.getInt(leftRight[1]) > 0)
							newObj.statMods.put(leftRight[0], Fmt.getInt(leftRight[1]));
				}

				newObj.resetFilled = dbResult.getInt("object_resetfilled");
				newObj.toChar(ch);
				newObj.wearloc = dbResult.getString("object_wearloc");
			}
			
			for (ObjData ob : ch.objects)
				loadObjObjects(ob);
			
			dbQuery.executeUpdate("DELETE FROM objects WHERE object_character = "+ch.id);
			
		} catch (Exception e) {
			sysLog("bugs", "Error in loadCharObjects: "+e.getMessage());
			logException(e);
		}
	}

	public static void loadObjObjects(ObjData o)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM objects"+
					" WHERE object_object = "+o.id+
					" ORDER BY object_id");
			while (dbResult.next())
			{
				ObjData newObj = new ObjData(dbResult.getInt("object_id"));
				newObj.op = ObjProto.lookup(dbResult.getInt("object_proto"));
				if (newObj.op == null)
					newObj.op = objProtos.get(0);
				newObj.name = dbResult.getString("object_name");
				newObj.shortName = dbResult.getString("object_short");
				newObj.longName = dbResult.getString("object_long");
				newObj.description = dbResult.getString("object_description");

				String dString = dbResult.getString("object_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newObj.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}

				String tempTriggers = dbResult.getString("object_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.oprog = ObjProg.lookup(Fmt.getInt(s));
							if (tempTrigger.oprog != null)
								newObj.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}

				newObj.level = dbResult.getInt("object_level");
				newObj.cost = dbResult.getInt("object_cost");
				newObj.decay = dbResult.getInt("object_decay");
				newObj.lastTouched = dbResult.getInt("object_last_touched");
				newObj.material = dbResult.getString("object_material");
				newObj.type = dbResult.getString("object_type");

				String fString = dbResult.getString("object_flags");
				for (String s : Flags.objFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newObj.flags.put(s, true);

				String eString[] = dbResult.getString("object_effects").split(";");
				for (String ef : eString)
				{
					String part[] = ef.split("\\|");
					if (part.length < 3)
						continue;
					Effect newE = new Effect(part[0], Fmt.getInt(part[1]), Fmt.getInt(part[2]));
					for (ctr = 3; part.length > ctr; ctr++)
					{
						String subpart[] = part[ctr].split("=");
						if (subpart.length == 2)
							newE.statMods.put(subpart[0], Fmt.getInt(subpart[1]));
					}
					newObj.effects.add(newE);
				}

				newObj.setTypeFlags(dbResult.getString("object_typeflags"));
				newObj.value1 = dbResult.getString("object_value1");
				newObj.value2 = dbResult.getString("object_value2");
				newObj.value3 = dbResult.getString("object_value3");
				newObj.value4 = dbResult.getString("object_value4");
				newObj.value5 = dbResult.getString("object_value5");

				String sString = dbResult.getString("object_statmods");
				for (String s : sString.split(";"))
				{
					String leftRight[] = s.split(":");
					if (leftRight.length == 2)
						if (Fmt.getInt(leftRight[1]) > 0)
							newObj.statMods.put(leftRight[0], Fmt.getInt(leftRight[1]));
				}

				newObj.resetFilled = dbResult.getInt("object_resetfilled");
				newObj.toObject(o);
			}
			
			for (ObjData ob : o.objects)
				loadObjObjects(ob);

			dbQuery.executeUpdate("DELETE FROM objects WHERE object_object = "+o.id);
			
		} catch (Exception e) {
			sysLog("bugs", "Error in loadObjObjects: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveRoomObjects()
	{
		try
		{
			for (Room r : rooms)
			{
				saveRoom(r);
				for (ObjData o : r.objects)
					saveObject(o);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in saveRoomObjects: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void loadRoomObjects(Room r)
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM objects"+
					" WHERE object_room = "+r.id+
					" ORDER BY object_id");
			while (dbResult.next())
			{
				ObjData newObj = new ObjData(dbResult.getInt("object_id"));
				newObj.op = ObjProto.lookup(dbResult.getInt("object_proto"));
				if (newObj.op == null)
					newObj.op = objProtos.get(0);
				newObj.name = dbResult.getString("object_name");
				newObj.shortName = dbResult.getString("object_short");
				newObj.longName = dbResult.getString("object_long");
				newObj.description = dbResult.getString("object_description");

				String dString = dbResult.getString("object_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newObj.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}

				String tempTriggers = dbResult.getString("object_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.oprog = ObjProg.lookup(Fmt.getInt(s));
							if (tempTrigger.oprog != null)
								newObj.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}

				newObj.level = dbResult.getInt("object_level");
				newObj.cost = dbResult.getInt("object_cost");
				newObj.decay = dbResult.getInt("object_decay");
				newObj.lastTouched = dbResult.getInt("object_last_touched");
				newObj.material = dbResult.getString("object_material");
				newObj.type = dbResult.getString("object_type");

				String fString = dbResult.getString("object_flags");
				for (String s : Flags.objFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newObj.flags.put(s, true);

				String eString[] = dbResult.getString("object_effects").split(";");
				for (String ef : eString)
				{
					String part[] = ef.split("\\|");
					if (part.length < 3)
						continue;
					Effect newE = new Effect(part[0], Fmt.getInt(part[1]), Fmt.getInt(part[2]));
					for (ctr = 3; part.length > ctr; ctr++)
					{
						String subpart[] = part[ctr].split("=");
						if (subpart.length == 2)
							newE.statMods.put(subpart[0], Fmt.getInt(subpart[1]));
					}
					newObj.effects.add(newE);
				}

				newObj.setTypeFlags(dbResult.getString("object_typeflags"));
				newObj.value1 = dbResult.getString("object_value1");
				newObj.value2 = dbResult.getString("object_value2");
				newObj.value3 = dbResult.getString("object_value3");
				newObj.value4 = dbResult.getString("object_value4");
				newObj.value5 = dbResult.getString("object_value5");

				String sString = dbResult.getString("object_statmods");
				for (String s : sString.split(";"))
				{
					String leftRight[] = s.split(":");
					if (leftRight.length == 2)
						if (Fmt.getInt(leftRight[1]) > 0)
							newObj.statMods.put(leftRight[0], Fmt.getInt(leftRight[1]));
				}

				newObj.resetFilled = dbResult.getInt("object_resetfilled");
				newObj.toRoom(r);
			}
			
			for (ObjData ob : r.objects)
				loadObjObjects(ob);

			dbQuery.executeUpdate("DELETE FROM objects WHERE object_room = "+r.id);
			
		} catch (Exception e) {
			sysLog("bugs", "Error in loadRoomObjects: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveObject(ObjData ob)
	{
		try
		{
			String iString = "NULL";
			boolean fixId = true;
			if (ob.id != 0)
			{
				dbQuery.executeUpdate("DELETE FROM objects WHERE object_object = "+ob.id+" OR object_id = "+ob.id);
				iString = ""+ob.id;
				fixId = false;
			}

			String dString = "";
			for (String d : ob.eds.keySet())
				dString = dString+d.replace(";", "SPECSEMICOLON")+";"+ob.eds.get(d).replace(";", "SPECSEMICOLON")+";";
	
			String tString = "";
			for (Trigger t : ob.triggers)
				tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";"+t.oprog.id+";";
	
			String rString = "0";
			if (ob.currentRoom != null)
				rString = ""+ob.currentRoom.id;

			String cString = "0";
			if (ob.currentChar != null)
				cString = ""+ob.currentChar.id;

			String oString = "0";
			if (ob.currentObj != null)
				oString = ""+ob.currentObj.id;

			String fString = "";
			for (String s : Flags.objFlags)
				if (ob.flags.get(s) != null)
					if (ob.flags.get(s))
						fString = fString+s+";";
	
			String eString = "";
			for (Effect e : ob.effects)
			{
				eString = eString+e.name+"|"+e.level+"|"+e.duration;
				for (String s : e.statMods.keySet())
					eString = eString+"|"+s+"="+e.statMods.get(s);
				eString = eString+";";
			}

			String tfString = "";
			for (String s : ob.typeFlags.keySet())
				if (ob.typeFlags.get(s))
					tfString = tfString+s+";";

			String sString = "";
			for (String s : ob.statMods.keySet())
				sString = sString+s+":"+ob.statMods.get(s)+";";

			dbQuery.executeUpdate("INSERT INTO objects VALUES ("+
								iString+", "+
								rString+", "+
								cString+", "+
								"'"+dbSafe(ob.wearloc)+"', "+
								oString+", "+
								ob.op.id+", "+
								"'"+dbSafe(ob.name)+"', "+
								"'"+dbSafe(ob.shortName)+"', "+
								"'"+dbSafe(ob.longName)+"', "+
								"'"+dbSafe(ob.description)+"', "+
								"'"+dbSafe(dString)+"', "+
								"'"+dbSafe(tString)+"', "+
								ob.level+", "+
								ob.cost+", "+
								ob.decay+", "+
								ob.lastTouched+", "+
								"'"+dbSafe(ob.material)+"', "+
								"'"+dbSafe(ob.type)+"', "+
								"'"+dbSafe(fString)+"', "+
								"'"+dbSafe(eString)+"', "+
								"'"+dbSafe(tfString)+"', "+
								"'"+dbSafe(ob.value1)+"', "+
								"'"+dbSafe(ob.value2)+"', "+
								"'"+dbSafe(ob.value3)+"', "+
								"'"+dbSafe(ob.value4)+"', "+
								"'"+dbSafe(ob.value5)+"', "+
								"'"+dbSafe(sString)+"', "+
								ob.resetFilled+")");
								
			if (fixId)
			{
				ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(object_id) AS max_id FROM objects");
				if (dbResult.next())
					ob.id = dbResult.getInt("max_id");
			}

			for (ObjData o : ob.objects)
				saveObject(o);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveObject: "+e.getMessage());
			logException(e);
		}
	}
	
	public static int forceUpdateObject(ObjData ob, int protoId)
	{
		int updated = 0;
		try
		{
			String dString = "";
			for (String d : ob.eds.keySet())
				dString = dString+d.replace(";", "SPECSEMICOLON")+";"+ob.eds.get(d).replace(";", "SPECSEMICOLON")+";";
	
			String tString = "";
			for (Trigger t : ob.triggers)
				tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";"+t.oprog.id+";";

			String fString = "";
			for (String s : Flags.objFlags)
				if (ob.flags.get(s) != null)
					if (ob.flags.get(s))
						fString = fString+s+";";
	
			String eString = "";
			for (Effect e : ob.effects)
			{
				eString = eString+e.name+"|"+e.level+"|"+e.duration;
				for (String s : e.statMods.keySet())
					eString = eString+"|"+s+"="+e.statMods.get(s);
				eString = eString+";";
			}

			String tfString = "";
			for (String s : ob.typeFlags.keySet())
				if (ob.typeFlags.get(s))
					tfString = tfString+s+";";

			String sString = "";
			for (String s : ob.statMods.keySet())
				sString = sString+s+":"+ob.statMods.get(s)+";";

			dbQuery.executeUpdate("UPDATE objects SET "+
								"object_name = '"+dbSafe(ob.name)+"', "+
								"object_short = '"+dbSafe(ob.shortName)+"', "+
								"object_long = '"+dbSafe(ob.longName)+"', "+
								"object_description = '"+dbSafe(ob.description)+"', "+
								"object_extradescs = '"+dbSafe(dString)+"', "+
								"object_triggers = '"+dbSafe(tString)+"', "+
								"object_level = "+ob.level+", "+
								"object_cost = "+ob.cost+", "+
								"object_material = '"+dbSafe(ob.material)+"', "+
								"object_type = '"+dbSafe(ob.type)+"', "+
								"object_flags = '"+dbSafe(fString)+"', "+
								"object_effects = '"+dbSafe(eString)+"', "+
								"object_typeflags = '"+dbSafe(tfString)+"', "+
								"object_value1 = '"+dbSafe(ob.value1)+"', "+
								"object_value2 = '"+dbSafe(ob.value2)+"', "+
								"object_value3 = '"+dbSafe(ob.value3)+"', "+
								"object_value4 = '"+dbSafe(ob.value4)+"', "+
								"object_value5 = '"+dbSafe(ob.value5)+"', "+
								"object_statmods = '"+dbSafe(sString)+"' "+
								"WHERE object_proto = "+protoId);
			ResultSet dbResult = dbQuery.executeQuery("SELECT COUNT(object_proto) AS num_objects FROM objects WHERE object_proto = "+protoId);
			if (dbResult.next())
				updated = dbResult.getInt("num_objects");
		} catch (Exception e) {
			sysLog("bugs", "Error in forceUpdateObject: "+e.getMessage());
			logException(e);
		}
		return updated;
	}
	
	/**
	Get information about a command from the database, including permissions and aliases.
	<p>
	This method throws an exception because it is the first database method used when
	the MUD is started. If this method fails, main() will catch an exception detailing
	the error message to the user who started the MUD.
	
	@param cmd The command to load information about.
	*/
	public static void loadCommand(Command cmd) throws Exception
	{
		ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM commands WHERE command_name LIKE '"+cmd.fullName+"'");
		if (dbResult.next())
		{
			String aliases[] = dbResult.getString("command_aliases").split(";");
			for (String a : aliases)
				if (a.length() > 0)
					cmd.alias.add(a);
			String permissions[] = dbResult.getString("command_permissions").split(";");
			for (String p : permissions)
				if (p.length() > 0)
					cmd.permissions.add(p);
			if (dbResult.getInt("command_log") > 0)
				cmd.log = true;
			else
				cmd.log = false;
		}
		else
		{
			dbQuery.executeUpdate("INSERT INTO commands VALUES ('"+cmd.fullName+"', '', '', 0)");
		}
		Collections.sort(cmd.alias);
	}
	
	/**
	Save information about the given command to the database.
	
	@param cmd The command to save to the database.
	*/
	public static void saveCommand(Command cmd)
	{
		String aString = "";
		for (String a : cmd.alias)
			if (!a.equals(cmd.fullName))
				aString = aString+a+";";

		String pString = "";
		for (String p : cmd.permissions)
			pString = pString+p+";";

		String lString = "0";
		if (cmd.log)
			lString = "1";
			
		try
		{
			dbQuery.executeUpdate("UPDATE commands SET "+
								"command_aliases = '"+dbSafe(aString)+"', "+
								"command_permissions = '"+dbSafe(pString)+"', "+
								"command_log = "+lString+" "+
								"WHERE command_name LIKE '"+cmd.fullName+"'");
		} catch (Exception e) {
			sysLog("bugs", "Error in saveCommand: "+e.getMessage());
			logException(e);
		}
	}

	public static void loadSkill(Skill sk)
	{
		for (String s : Flags.skillFlags)
			sk.flags.put(s, false);

		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM skills WHERE skill_name LIKE '"+dbSafe(sk.name)+"'");
			if (dbResult.next())
			{
				sk.cost = dbResult.getInt("skill_cost");
				sk.useDelay = dbResult.getInt("skill_delay");
				if (sk.useDelay == 0)
					sk.useDelay = 30;

				sk.cooldown = dbResult.getInt("skill_cooldown");
					
				String fString = dbResult.getString("skill_flags");
				for (String s : Flags.skillFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						sk.flags.put(s, true);
				
				sk.targetType = dbResult.getString("skill_target_type");
				
				String aString = dbResult.getString("skill_availability");
				for (String s : aString.split(";"))
				{
					if (s.split(":").length == 2)
					{
						String left = s.split(":")[0];
						String right = s.split(":")[1];
						CharClass targetClass = CharClass.lookup(Fmt.getInt(left));
						if (targetClass != null)
							sk.avail.put(targetClass, Fmt.getInt(right));
					}
				}
			}
			else
				dbQuery.executeUpdate("INSERT INTO skills VALUES ('"+dbSafe(sk.name)+"', 0, 0, 0, '', 'none', '')");
		} catch (Exception e) {
			sysLog("bugs", "Error in loadSkill: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveSkill(Skill sk)
	{
		String fString = "";
		for (String s : Flags.skillFlags)
			if (sk.flags.get(s) != null)
				if (sk.flags.get(s))
					fString = fString+s+";";

		String aString = "";
		for (CharClass c : sk.avail.keySet())
			aString = aString+c.id+":"+sk.avail.get(c)+";";

		try
		{
			dbQuery.executeUpdate("UPDATE skills SET "+
								"skill_cost = "+sk.cost+", "+
								"skill_delay = "+sk.useDelay+", "+
								"skill_cooldown = "+sk.cooldown+", "+
								"skill_flags = '"+dbSafe(fString)+"', "+
								"skill_target_type = '"+dbSafe(sk.targetType)+"', "+
								"skill_availability = '"+dbSafe(aString)+"' "+
								" WHERE skill_name LIKE '"+dbSafe(sk.name)+"'");
		} catch (Exception e) {
			sysLog("bugs", "Error in saveSkill: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Load all socials from the database and populate the {@link MudMain#socials socials}
	global ArrayList.
	*/
	public static void loadSocials()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM socials ORDER BY social_id");
			while (dbResult.next())
			{
				Social newSocial = new Social(dbResult.getInt("social_id"));
				newSocial.name = dbResult.getString("social_name");
				newSocial.cNoArg = dbResult.getString("social_cnoarg");
				newSocial.oNoArg = dbResult.getString("social_onoarg");
				newSocial.cFound = dbResult.getString("social_cfound");
				newSocial.oFound = dbResult.getString("social_ofound");
				newSocial.vFound = dbResult.getString("social_vfound");
				newSocial.cSelf = dbResult.getString("social_cself");
				newSocial.oSelf = dbResult.getString("social_oself");
				socials.add(newSocial);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error loadSocials: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Create a new social both on the game and in the database, then set the new social's
	ID to the ID generated by the database.
	*/
	public static void newSocial(String name)
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO socials VALUES(NULL, '"+dbSafe(name)+"', '', '', '', '', '', '', '')");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(social_id) AS new_id FROM socials");
			dbResult.next();
			Social newSocial = new Social(dbResult.getInt("new_id"));
			newSocial.name = name;
			newSocial.cNoArg = "";
			newSocial.oNoArg = "";
			newSocial.cFound = "";
			newSocial.oFound = "";
			newSocial.vFound = "";
			newSocial.cSelf = "";
			newSocial.oSelf = "";
			socials.add(newSocial);
		} catch (Exception e) {
			sysLog("bugs", "Error in newSocial: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Save the given social to the database.
	
	@param s The social to save to the database.
	*/
	public static void saveSocial(Social s)
	{
		try
		{
			dbQuery.executeUpdate("UPDATE socials SET social_name = '"+dbSafe(s.name)+"', "+
					"social_cnoarg = '"+dbSafe(s.cNoArg)+"', "+
					"social_onoarg = '"+dbSafe(s.oNoArg)+"', "+
					"social_cfound = '"+dbSafe(s.cFound)+"', "+
					"social_ofound = '"+dbSafe(s.oFound)+"', "+
					"social_vfound = '"+dbSafe(s.vFound)+"', "+
					"social_cself = '"+dbSafe(s.cSelf)+"', "+
					"social_oself = '"+dbSafe(s.oSelf)+"'"+
					" WHERE social_id = "+s.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveSocial: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Load all help files from the database and populate the {@link MudMain#helps helps}
	global ArrayList.
	*/
	public static void loadHelps()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM help ORDER BY help_id");
			while (dbResult.next())
			{
				Help newHelp = new Help(dbResult.getInt("help_id"));
				newHelp.title = dbResult.getString("help_title");
				newHelp.text = dbResult.getString("help_text");
				String permissions[] = dbResult.getString("help_permissions").split(";");
				for (String p : permissions)
					if (p.length() > 0)
						newHelp.permissions.add(p);
				MudMain.helps.add(newHelp);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error loadHelps: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Create a new help file in the database and return its ID number.
	
	@return The ID number of the new help file, as generated by the database.
	*/
	public static int newHelp()
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO help VALUES(NULL, '', '', '')");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(help_id) AS new_id FROM help");
			dbResult.next();
			return dbResult.getInt("new_id");
		} catch (Exception e) {
			sysLog("bugs", "Error in newHelp: "+e.getMessage());
			logException(e);
			return 0;
		}
	}
	
	/**
	Save the given help file to the database.
	
	@param s The help file to save to the database.
	*/
	public static void saveHelp(Help s)
	{
		String pString = "";
		for (String p : s.permissions)
			pString = pString+p+";";

		try
		{
			dbQuery.executeUpdate("UPDATE help SET help_title = '"+dbSafe(s.title)+
					"', help_text = '"+dbSafe(s.text)+
					"', help_permissions = '"+dbSafe(pString)+
					"' WHERE help_id = "+s.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveHelp: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Delete the given help file from the database.
	
	@param s The help file to delete.
	*/
	public static void deleteHelp(Help s)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM help WHERE help_id = "+s.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteHelp: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Load all areas from the database and populate the {@link MudMain#areas areas}
	global ArrayList.
	*/
	public static void loadAreas()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM areas ORDER BY area_id");
			while (dbResult.next())
			{
				Area newArea = new Area(dbResult.getInt("area_id"));
				newArea.name = dbResult.getString("area_name");
				newArea.description = dbResult.getString("area_description");
				newArea.minLevel = dbResult.getInt("area_minlevel");
				newArea.maxLevel = dbResult.getInt("area_maxlevel");
				
				String fString = dbResult.getString("area_flags");
				for (String s : Flags.areaFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newArea.flags.put(s, true);

				newArea.start = dbResult.getInt("area_start");
				newArea.end = dbResult.getInt("area_end");
				newArea.climate = dbResult.getString("area_climate");
				newArea.weatherCycle = dbResult.getString("area_weather_cycle");
				newArea.weatherLastCycle = dbResult.getString("area_weather_last_cycle");
				newArea.weatherTimer = dbResult.getInt("area_weather_timer");
				newArea.weatherTemp = dbResult.getInt("area_weather_temp");
				newArea.weatherCloud = dbResult.getInt("area_weather_cloud");
				newArea.weatherPrecip = dbResult.getInt("area_weather_precip");
				newArea.weatherWind = dbResult.getInt("area_weather_wind");
				MudMain.areas.add(newArea);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadAreas: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Create a new area both on the game and in the database, then set the new area's
	ID to the ID generated by the database.
	*/
	public static void newArea()
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO areas VALUES(NULL, 'A New Area', '', 0, 0, '', 0, 0, 'temperate', 'clear', 'clear', 0, 0, 0, 0, 0)");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(area_id) AS new_id FROM areas");
			dbResult.next();
			Area newArea = new Area(dbResult.getInt("new_id"));
			newArea.name = "A New Area";
			newArea.description = "";
			newArea.start = 0;
			newArea.end = 0;
			newArea.climate = "temperate";
			newArea.weatherCycle = "clear";
			newArea.weatherLastCycle = "clear";
			newArea.weatherTimer = 0;
			newArea.weatherTemp = 0;
			newArea.weatherCloud = 0;
			newArea.weatherPrecip = 0;
			newArea.weatherWind = 0;
			areas.add(newArea);
		} catch (Exception e) {
			sysLog("bugs", "Error in newArea: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Save the given area to the database.
	<p>
	Note that this does not save the actual contents of the area, just the information
	about the area (name, description, ID range, etc).
	
	@param a The area to save to the database.
	*/
	public static void saveArea(Area a)
	{
		String fString = "";
		for (String s : Flags.areaFlags)
			if (a.flags.get(s) != null)
				if (a.flags.get(s))
					fString = fString+s+";";

		try
		{
			dbQuery.executeUpdate("UPDATE areas SET area_name = '"+dbSafe(a.name)+"', "+
					"area_description = '"+dbSafe(a.description)+"', "+
					"area_minlevel = "+a.minLevel+", "+
					"area_maxlevel = "+a.maxLevel+", "+
					"area_flags = '"+fString+"', "+
					"area_start = "+a.start+", "+
					"area_end = "+a.end+", "+
					"area_climate = '"+dbSafe(a.climate)+"', "+
					"area_weather_cycle = '"+dbSafe(a.weatherCycle)+"', "+
					"area_weather_last_cycle = '"+dbSafe(a.weatherLastCycle)+"', "+
					"area_weather_timer = "+a.weatherTimer+", "+
					"area_weather_temp = "+a.weatherTemp+", "+
					"area_weather_cloud = "+a.weatherCloud+", "+
					"area_weather_precip = "+a.weatherPrecip+", "+
					"area_weather_wind = "+a.weatherWind+" "+
					"WHERE area_id = "+a.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveArea: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Load all rooms from the database and populate the {@link MudMain#rooms rooms}
	global ArrayList.
	*/
	public static void loadRooms()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM rooms ORDER BY room_id");
			while (dbResult.next())
			{
				Room newRoom = new Room(dbResult.getInt("room_id"));
				newRoom.name = dbResult.getString("room_name");
				newRoom.description = dbResult.getString("room_description");
				
				String dString = dbResult.getString("room_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newRoom.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}
				
				newRoom.sector = dbResult.getString("room_sector");
				newRoom.occLimit = dbResult.getInt("room_occlimit");

				String fString = dbResult.getString("room_flags");
				for (String s : Flags.roomFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newRoom.flags.put(s, true);

				String eString[] = dbResult.getString("room_effects").split(";");
				for (String ef : eString)
				{
					String part[] = ef.split("\\|");
					if (part.length < 3)
						continue;
					Effect newE = new Effect(part[0], Fmt.getInt(part[1]), Fmt.getInt(part[2]));
					for (int ctr = 3; part.length > ctr; ctr++)
					{
						String subpart[] = part[ctr].split("=");
						if (subpart.length == 2)
							newE.statMods.put(subpart[0], Fmt.getInt(subpart[1]));
					}
					newRoom.effects.add(newE);
				}

				String tempTriggers = dbResult.getString("room_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.rprog = RoomProg.lookup(Fmt.getInt(s));
							if (tempTrigger.rprog != null)
								newRoom.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}
				rooms.add(newRoom);
			}
			
			for (Room r : rooms)
				loadRoomObjects(r);
		} catch (Exception e) {
			sysLog("bugs", "Error in loadRooms: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Attempt to create a new room in the database using the given ID as its new ID.
	<p>
	The method first checks for an existing room in the database with the same ID. If
	one is found, it will return {@code false} and the room will not be created.
	
	@param newId The ID to assign to the new room.
	@return {@code true} if the room was created without conflict; {@code false}
		otherwise.
	*/
	public static boolean newRoom(int newId)
	{
		try
		{
			// Check for a duplicate room ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM rooms WHERE room_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO rooms VALUES("+newId+", 'A New Room', '', '', '"+Flags.roomSectors[0]+"', 0, '', '', '')");
			Room newRoom = new Room(newId);
			newRoom.name = "A New Room";
			newRoom.description = "";
			newRoom.sector = Flags.roomSectors[0];
			newRoom.occLimit = 0;
			rooms.add(newRoom);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newRoom: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	
	/**
	Save the given room to the database.
	
	@param r The room to save to the database.
	*/
	public static void saveRoom(Room r)
	{
		String dString = "";
		for (String d : r.eds.keySet())
			dString = dString+d.replace(";", "SPECSEMICOLON")+";"+r.eds.get(d).replace(";", "SPECSEMICOLON")+";";

		String fString = "";
		for (String s : Flags.roomFlags)
			if (r.flags.get(s) != null)
				if (r.flags.get(s))
					fString = fString+s+";";

		String eString = "";
		for (Effect e : r.effects)
		{
			eString = eString+e.name+"|"+e.level+"|"+e.duration;
			for (String s : e.statMods.keySet())
				eString = eString+"|"+s+"="+e.statMods.get(s);
			eString = eString+";";
		}

		String tString = "";
		for (Trigger t : r.triggers)
			tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";"+t.rprog.id+";";
		
		try
		{
			dbQuery.executeUpdate("UPDATE rooms SET "+
					"room_name = '"+dbSafe(r.name)+"', "+
					"room_description = '"+dbSafe(r.description)+"', "+
					"room_extradescs = '"+dbSafe(dString)+"', "+
					"room_sector = '"+dbSafe(r.sector)+"', "+
					"room_occlimit = "+r.occLimit+", "+
					"room_flags = '"+dbSafe(fString)+"', "+
					"room_effects = '"+dbSafe(eString)+"', "+
					"room_triggers = '"+dbSafe(tString)+"' "+
					"WHERE room_id = "+r.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveRoom: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Delete the given room from the game, including all exits and resets, and
	delete it from the database.
	
	@param r The room to delete.
	*/
	public static void deleteRoom(Room r)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM rooms WHERE room_id = "+r.id);
			rooms.remove(r);
			for (Exit ex : r.exits)
				deleteExit(ex);
			for (Room rs : rooms)
				for (int ctr = 0; ctr < rs.exits.size(); ctr++)
					if (rs.exits.get(ctr).to == r)
					{
						deleteExit(rs.exits.get(ctr));
						rs.exits.remove(ctr);
						ctr--;
					}
			for (Reset rs : r.resets)
				deleteReset(rs);
			rooms.remove(r);
			for (CharData cd : allChars())
				if (cd.currentRoom == r)
					cd.currentRoom = rooms.get(0);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteRoom: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void loadProgs()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'r' ORDER BY prog_id");
			while (dbResult.next())
			{
				RoomProg newRp = new RoomProg(dbResult.getInt("prog_id"));
				newRp.name = dbResult.getString("prog_name");
				newRp.description = dbResult.getString("prog_description");
				String codeLines[] = dbResult.getString("prog_code").split("\\^/");
				for (String l : codeLines)
					newRp.code.add(l.replace("SPEC_NEWLINE", "^/"));
				rprogs.add(newRp);
			}

			dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'm' ORDER BY prog_id");
			while (dbResult.next())
			{
				MobProg newRp = new MobProg(dbResult.getInt("prog_id"));
				newRp.name = dbResult.getString("prog_name");
				newRp.description = dbResult.getString("prog_description");
				String codeLines[] = dbResult.getString("prog_code").split("\\^/");
				for (String l : codeLines)
					newRp.code.add(l.replace("SPEC_NEWLINE", "^/"));
				mprogs.add(newRp);
			}

			dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'o' ORDER BY prog_id");
			while (dbResult.next())
			{
				ObjProg newRp = new ObjProg(dbResult.getInt("prog_id"));
				newRp.name = dbResult.getString("prog_name");
				newRp.description = dbResult.getString("prog_description");
				String codeLines[] = dbResult.getString("prog_code").split("\\^/");
				for (String l : codeLines)
					newRp.code.add(l.replace("SPEC_NEWLINE", "^/"));
				oprogs.add(newRp);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadProgs: "+e.getMessage());
			logException(e);
		}
	}

	public static boolean newRprog(int newId)
	{
		try
		{
			// Check for a duplicate room ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'r' AND prog_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO progs VALUES('r', "+newId+", 'Unnamed Rprog', '', '')");
			RoomProg newRprog = new RoomProg(newId);
			newRprog.name = "Unnamed Rprog";
			newRprog.description = "";
			rprogs.add(newRprog);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newRprog: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	public static boolean newMprog(int newId)
	{
		try
		{
			// Check for a duplicate room ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'm' AND prog_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO progs VALUES('m', "+newId+", 'Unnamed Mprog', '', '')");
			MobProg newMprog = new MobProg(newId);
			newMprog.name = "Unnamed Mprog";
			newMprog.description = "";
			mprogs.add(newMprog);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newMprog: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	public static boolean newOprog(int newId)
	{
		try
		{
			// Check for a duplicate room ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM progs WHERE prog_type LIKE 'o' AND prog_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO progs VALUES('o', "+newId+", 'Unnamed Mprog', '', '')");
			ObjProg newOprog = new ObjProg(newId);
			newOprog.name = "Unnamed Oprog";
			newOprog.description = "";
			oprogs.add(newOprog);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newOprog: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	public static void saveRprog(RoomProg rp)
	{
		String codeString = "";
		for (String s : rp.code)
			codeString = codeString+"^/"+s;
		if (codeString.length() > 2)
			codeString = codeString.substring(2);
		
		try
		{
			dbQuery.executeUpdate("UPDATE progs SET "+
					"prog_name = '"+dbSafe(rp.name)+"', "+
					"prog_description = '"+dbSafe(rp.description)+"', "+
					"prog_code = '"+dbSafe(codeString)+"' "+
					" WHERE prog_type LIKE 'r' AND prog_id = "+rp.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveRprog: "+e.getMessage());
			logException(e);
		}
	}
	public static void saveMprog(MobProg rp)
	{
		String codeString = "";
		for (String s : rp.code)
			codeString = codeString+"^/"+s;
		if (codeString.length() > 2)
			codeString = codeString.substring(2);
		
		try
		{
			dbQuery.executeUpdate("UPDATE progs SET "+
					"prog_name = '"+dbSafe(rp.name)+"', "+
					"prog_description = '"+dbSafe(rp.description)+"', "+
					"prog_code = '"+dbSafe(codeString)+"' "+
					" WHERE prog_type LIKE 'm' AND prog_id = "+rp.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveMprog: "+e.getMessage());
			logException(e);
		}
	}
	public static void saveOprog(ObjProg rp)
	{
		String codeString = "";
		for (String s : rp.code)
			codeString = codeString+"^/"+s;
		if (codeString.length() > 2)
			codeString = codeString.substring(2);
		
		try
		{
			dbQuery.executeUpdate("UPDATE progs SET "+
					"prog_name = '"+dbSafe(rp.name)+"', "+
					"prog_description = '"+dbSafe(rp.description)+"', "+
					"prog_code = '"+dbSafe(codeString)+"' "+
					" WHERE prog_type LIKE 'o' AND prog_id = "+rp.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveMprog: "+e.getMessage());
			logException(e);
		}
	}
	public static void deleteRprog(RoomProg rp)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM progs WHERE prog_type LIKE 'r' AND prog_id = "+rp.id);
			rprogs.remove(rp);
			for (Room r : rooms)
				for (int ctr = 0; ctr < r.triggers.size(); ctr++)
					if (r.triggers.get(ctr).rprog == rp)
					{
						r.triggers.remove(ctr);
						saveRoom(r);
						ctr--;
					}
						
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteRprog: "+e.getMessage());
			logException(e);
		}
	}
	public static void deleteMprog(MobProg rp)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM progs WHERE prog_type LIKE 'm' AND prog_id = "+rp.id);
			mprogs.remove(rp);
			for (CharData m : mobs)
				for (int ctr = 0; ctr < m.triggers.size(); ctr++)
					if (m.triggers.get(ctr).mprog == rp)
					{
						m.triggers.remove(ctr);
						ctr--;
					}
						
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteMprog: "+e.getMessage());
			logException(e);
		}
	}
	public static void deleteOprog(ObjProg rp)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM progs WHERE prog_type LIKE 'o' AND prog_id = "+rp.id);
			oprogs.remove(rp);
			for (ObjData o : ObjData.allObjects())
				for (int ctr = 0; ctr < o.triggers.size(); ctr++)
					if (o.triggers.get(ctr).oprog == rp)
					{
						o.triggers.remove(ctr);
						ctr--;
					}
						
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteOprog: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Load all exits from the database and add the exits to the appropriate rooms to link
	them.
	*/
	public static void loadExits()
	{
		try
		{
			for (Room r : rooms)
			{
				ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM exits WHERE exit_from = "+r.id);
				while (dbResult.next())
				{
					Exit newExit = new Exit(dbResult.getInt("exit_id"));
					newExit.to = Room.lookup(dbResult.getInt("exit_to"));
					newExit.from = r;
					newExit.direction = dbResult.getString("exit_direction");
					newExit.doorName = dbResult.getString("exit_doorname");
					newExit.timer = dbResult.getInt("exit_timer");
					String fString = dbResult.getString("exit_flags");
					for (String s : Flags.exitFlags)
						if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
							newExit.flags.put(s, true);
					newExit.key = dbResult.getInt("exit_key");
					if (newExit.to != null)
						r.exits.add(newExit);
					else
						deleteExit(newExit);
				}
				Collections.sort(r.exits);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadExits: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Create a new exit both on the game and in the database, then set the new area's
	ID to the ID generated by the database.
	
	@return The new Exit object with its ID set.
	*/
	public static Exit newExit()
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO exits VALUES(NULL, 0, 0, '', '', 0, '', 0)");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(exit_id) AS new_id FROM exits");
			dbResult.next();
			Exit newExit = new Exit(dbResult.getInt("new_id"));
			return newExit;
		} catch (Exception e) {
			sysLog("bugs", "Error in newExit: "+e.getMessage());
			logException(e);
			return null;
		}
	}

	/**
	Save the given exit to the database.
	
	@param from The room ID to associate the exit with in the database.
	@param ex The exit to save to the database.
	*/
	public static void saveExit(Room from, Exit ex)
	{
		String fString = "";
		for (String s : Flags.exitFlags)
			if (ex.flags.get(s) != null)
				if (ex.flags.get(s))
					fString = fString+s+";";
		try
		{
			dbQuery.executeUpdate("UPDATE exits SET "+
					"exit_from = "+from.id+", "+
					"exit_to = "+ex.to.id+", "+
					"exit_direction = '"+dbSafe(ex.direction)+"', "+
					"exit_doorname = '"+dbSafe(ex.doorName)+"', "+
					"exit_timer = "+ex.timer+", "+
					"exit_flags = '"+dbSafe(fString)+"', "+
					"exit_key = "+ex.key+" "+
					"WHERE exit_id = "+ex.id);
			Collections.sort(from.exits);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveExit: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Delete the given exit from the database.
	
	@param ex The exit to delete.
	*/
	public static void deleteExit(Exit ex)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM exits WHERE exit_id = "+ex.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteExit: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Load all races from the database and populate the {@link MudMain#races races}
	global ArrayList.
	*/
	public static void loadRaces()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM races ORDER BY race_id");
			while (dbResult.next())
			{
				Race newRace = new Race(dbResult.getInt("race_id"));
				newRace.name = dbResult.getString("race_name");
				newRace.plural = dbResult.getString("race_plural");
				newRace.racegroup = dbResult.getString("race_racegroup");
				newRace.description = dbResult.getString("race_description");
				newRace.baseStr = dbResult.getInt("race_base_str");
				newRace.baseDex = dbResult.getInt("race_base_dex");
				newRace.baseCon = dbResult.getInt("race_base_con");
				newRace.baseInt = dbResult.getInt("race_base_int");
				newRace.baseCha = dbResult.getInt("race_base_cha");
				newRace.baseSlash = dbResult.getInt("race_base_slash");
				newRace.baseBash = dbResult.getInt("race_base_bash");
				newRace.basePierce = dbResult.getInt("race_base_pierce");
				newRace.baseFrost = dbResult.getInt("race_base_frost");
				newRace.baseFire = dbResult.getInt("race_base_fire");
				newRace.baseLightning = dbResult.getInt("race_base_lightning");
				newRace.baseAcid = dbResult.getInt("race_base_acid");
				newRace.baseGood = dbResult.getInt("race_base_good");
				newRace.baseEvil = dbResult.getInt("race_base_evil");
				newRace.movement = dbResult.getString("race_movement");
				newRace.hitname = dbResult.getString("race_hitname");
				MudMain.races.add(newRace);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadRaces: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Create a new race both on the game and in the database, then set the new race's
	ID to the ID generated by the database.
	*/
	public static void newRace()
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO races VALUES (NULL, 'NewRace', 'NewRaces', '', '', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', '')");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(race_id) AS new_id FROM races");
			dbResult.next();
			Race newRace = new Race(dbResult.getInt("new_id"));
			newRace.name = "NewRace";
			newRace.plural = "NewRaces";
			newRace.racegroup = "";
			newRace.description = "";
			newRace.baseStr = 0;
			newRace.baseDex = 0;
			newRace.baseCon = 0;
			newRace.baseInt = 0;
			newRace.baseCha = 0;
			newRace.baseSlash = 0;
			newRace.baseBash = 0;
			newRace.basePierce = 0;
			newRace.baseFrost = 0;
			newRace.baseFire = 0;
			newRace.baseLightning = 0;
			newRace.baseAcid = 0;
			newRace.baseGood = 0;
			newRace.baseEvil = 0;
			newRace.movement = "";
			newRace.hitname = "";
			races.add(newRace);
		} catch (Exception e) {
			sysLog("bugs", "Error in newRace: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Save the given race to the database.
	
	@param r The race to save to the database.
	*/
	public static void saveRace(Race r)
	{
		try
		{
			dbQuery.executeUpdate("UPDATE races SET race_name = '"+dbSafe(r.name)+"', "+
					"race_plural = '"+dbSafe(r.plural)+"', "+
					"race_racegroup = '"+dbSafe(r.racegroup)+"', "+
					"race_description = '"+dbSafe(r.description)+"', "+
					"race_base_str = "+r.baseStr+", "+
					"race_base_dex = "+r.baseDex+", "+
					"race_base_con = "+r.baseCon+", "+
					"race_base_int = "+r.baseInt+", "+
					"race_base_cha = "+r.baseCha+", "+
					"race_base_slash = "+r.baseSlash+", "+
					"race_base_bash = "+r.baseBash+", "+
					"race_base_pierce = "+r.basePierce+", "+
					"race_base_frost = "+r.baseFrost+", "+
					"race_base_fire = "+r.baseFire+", "+
					"race_base_lightning = "+r.baseLightning+", "+
					"race_base_acid = "+r.baseAcid+", "+
					"race_base_good = "+r.baseGood+", "+
					"race_base_evil = "+r.baseEvil+", "+
					"race_movement = '"+dbSafe(r.movement)+"', "+
					"race_hitname = '"+dbSafe(r.hitname)+"' "+
					"WHERE race_id = "+r.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveRace: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Load all classes from the database and populate the {@link MudMain#classes classes}
	global ArrayList.
	*/
	public static void loadClasses()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM classes ORDER BY class_id");
			while (dbResult.next())
			{
				CharClass newClass = new CharClass(dbResult.getInt("class_id"));
				newClass.name = dbResult.getString("class_name");
				newClass.parent = dbResult.getInt("class_parent");
				newClass.type = dbResult.getString("class_type");
				MudMain.classes.add(newClass);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadClasses: "+e.getMessage());
			logException(e);
		}
	}

	public static void loadLootgroups()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM lootgroups ORDER BY lootgroup_id");
			while (dbResult.next())
			{
				Lootgroup newLg = new Lootgroup(dbResult.getInt("lootgroup_id"));
				newLg.name = dbResult.getString("lootgroup_name");
				
				String objects[] = dbResult.getString("lootgroup_contents").split(";");
				for (String s : objects)
				{
					if (s.length() > 0)
					{
						String subObjects[] = s.split("=");
						if (subObjects.length == 1)
						{
							ObjProto tempOp = ObjProto.lookup(Fmt.getInt(s));
							if (tempOp != null)
								newLg.contents.put(tempOp, 100);
						}
						else
						{
							ObjProto tempOp = ObjProto.lookup(Fmt.getInt(subObjects[0]));
							if (tempOp != null)
								newLg.contents.put(tempOp, Fmt.getInt(subObjects[1]));
						}
					}
				}

				lootgroups.add(newLg);
			}

		} catch (Exception e) {
			sysLog("bugs", "Error in loadLootgroups: "+e.getMessage());
			logException(e);
		}
	}

	public static boolean newLootgroup(int newId)
	{
		try
		{
			// Check for a duplicate lootgroup ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM lootgroups WHERE lootgroup_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO lootgroups VALUES("+newId+", 'A New Lootgroup', '')");
			Lootgroup newLg = new Lootgroup(newId);
			newLg.name = "A New Lootgroup";
			lootgroups.add(newLg);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newLootgroup: "+e.getMessage());
			logException(e);
		}
		return false;
	}
	
	public static void saveLootgroup(Lootgroup l)
	{
		String cString = "";
		for (ObjProto op : l.contents.keySet())
			cString = cString+op.id+"="+l.contents.get(op)+";";

		try
		{
			dbQuery.executeUpdate("UPDATE lootgroups SET "+
					"lootgroup_name = '"+dbSafe(l.name)+"', "+
					"lootgroup_contents = '"+dbSafe(cString)+"' "+
					"WHERE lootgroup_id = "+l.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveLootgroup: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void deleteLootgroup(Lootgroup l)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM lootgroups WHERE lootgroup_id = "+l.id);
			lootgroups.remove(l);
			for (CharData ch : mobs)
				ch.lootgroups.remove(l);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteLootgroup: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Load all mob prototypes from the database and populate the {@link
	MudMain#charProtos charProtos} global ArrayList.
	*/
	public static void loadCharProtos()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM char_protos ORDER BY char_proto_id");
			while (dbResult.next())
			{
				CharProto newCharProto = new CharProto(dbResult.getInt("char_proto_id"));
				newCharProto.name = dbResult.getString("char_proto_name");
				newCharProto.shortName = dbResult.getString("char_proto_short");
				newCharProto.longName = dbResult.getString("char_proto_long");
				newCharProto.description = dbResult.getString("char_proto_description");

				String dString = dbResult.getString("char_proto_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newCharProto.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}

				String tempTriggers = dbResult.getString("char_proto_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.mprog = MobProg.lookup(Fmt.getInt(s));
							if (tempTrigger.mprog != null)
								newCharProto.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}

				String tempSex = dbResult.getString("char_proto_sex");
				if (tempSex.equals("m"))
					newCharProto.sex = "m";
				else if (tempSex.equals("f"))
					newCharProto.sex = "f";
				else
					newCharProto.sex = "r";

				int tempRace = dbResult.getInt("char_proto_race");
				for (Race r : MudMain.races)
					if (r.id == tempRace)
						newCharProto.charRace = r;
				int tempClass = dbResult.getInt("char_proto_class");
				for (CharClass c : MudMain.classes)
					if (c.id == tempClass)
						newCharProto.charClass = c;
				newCharProto.level = dbResult.getInt("char_proto_level");
				newCharProto.difficulty = dbResult.getInt("char_proto_difficulty");

				String fString = dbResult.getString("char_proto_flags");
				for (String s : Flags.charFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newCharProto.flags.put(s, true);
					else
						newCharProto.flags.put(s, false);

				String eString = dbResult.getString("char_proto_effects");
				for (String s : Flags.charEffects)
					if (eString.indexOf(";"+s+";") > -1 || eString.startsWith(s+";"))
						newCharProto.effects.put(s, true);
					else
						newCharProto.effects.put(s, false);
				
				newCharProto.position = dbResult.getString("char_proto_position");
				newCharProto.baseHp = dbResult.getInt("char_proto_base_hp");
				newCharProto.baseMana = dbResult.getInt("char_proto_base_mana");
				newCharProto.baseEnergy = dbResult.getInt("char_proto_base_energy");
				newCharProto.baseStr = dbResult.getInt("char_proto_base_str");
				newCharProto.baseDex = dbResult.getInt("char_proto_base_dex");
				newCharProto.baseCon = dbResult.getInt("char_proto_base_con");
				newCharProto.baseInt = dbResult.getInt("char_proto_base_int");
				newCharProto.baseCha = dbResult.getInt("char_proto_base_cha");
				newCharProto.baseArmSlash = dbResult.getInt("char_proto_base_arm_slash");
				newCharProto.baseArmBash = dbResult.getInt("char_proto_base_arm_bash");
				newCharProto.baseArmPierce = dbResult.getInt("char_proto_base_arm_pierce");
				newCharProto.baseResFrost = dbResult.getInt("char_proto_base_res_frost");
				newCharProto.baseResFire = dbResult.getInt("char_proto_base_res_fire");
				newCharProto.baseResLightning = dbResult.getInt("char_proto_base_res_lightning");
				newCharProto.baseResAcid = dbResult.getInt("char_proto_base_res_acid");
				newCharProto.baseResGood = dbResult.getInt("char_proto_base_res_good");
				newCharProto.baseResEvil = dbResult.getInt("char_proto_base_res_evil");
				newCharProto.movement = dbResult.getString("char_proto_movement");
				newCharProto.hitname = dbResult.getString("char_proto_hitname");
				newCharProto.align = dbResult.getInt("char_proto_align");
				
				for (String s : dbResult.getString("char_proto_sells").split(";"))
				{
					Lootgroup tempLg = Lootgroup.lookup(Fmt.getInt(s));
					if (tempLg != null)
						newCharProto.sells.add(tempLg);
				}
				
				MudMain.charProtos.add(newCharProto);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadCharProtos: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Attempt to create a new mob prototype in the database using the given ID as
	its new ID.
	<p>
	The method first checks for an existing prototype in the database with the same
	ID. If one is found, it will return {@code false} and the prototype will not be
	created.
	
	@param newId The ID to assign to the new mob prototype.
	@return {@code true} if the mob prototype was created without conflict; {@code
		false} otherwise.
	*/
	public static boolean newCharProto(int newId)
	{
		try
		{
			// Check for a duplicate char proto ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM char_protos WHERE char_proto_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO char_protos VALUES("+newId+", 'newmob', 'A New Mob', 'A New Mob is here with a blank stare.', '', '', '', 'r', "+races.get(0).id+", "+classes.get(0).id+", 1, 0, '', '', 'standing', 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, '', '', '', 0)");
			CharProto newCp = new CharProto(newId);
			newCp.name = "newmob";
			newCp.shortName = "A New Mob";
			newCp.longName = "A New Mob is here with a blank stare.";
			newCp.description = "";
			newCp.sex = "r";
			newCp.charRace = races.get(0);
			newCp.charClass = classes.get(0);
			newCp.level = 1;
			newCp.difficulty = 0;
			newCp.position = "standing";
			newCp.baseHp = 0;
			newCp.baseMana = 0;
			newCp.baseEnergy = 0;
			newCp.baseStr = 0;
			newCp.baseDex = 0;
			newCp.baseCon = 0;
			newCp.baseInt = 0;
			newCp.baseCha = 0;
			newCp.baseArmSlash = 0;
			newCp.baseArmBash = 0;
			newCp.baseArmPierce = 0;
			newCp.baseResFrost = 0;
			newCp.baseResFire = 0;
			newCp.baseResLightning = 0;
			newCp.baseResAcid = 0;
			newCp.baseResGood = 0;
			newCp.baseResEvil = 0;
			newCp.align = 0;
			newCp.movement = "";
			newCp.hitname = "";
			charProtos.add(newCp);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newCharProto: "+e.getMessage());
			logException(e);
		}
		return false;
	}

	/**
	Save the given mob prototype to the database.
	
	@param p The mob prototype to save to the database.
	*/
	public static void saveCharProto(CharProto p)
	{
		String dString = "";
		for (String d : p.eds.keySet())
			dString = dString+d.replace(";", "SPECSEMICOLON")+";"+p.eds.get(d).replace(";", "SPECSEMICOLON")+";";

		String fString = "";
		for (String s : Flags.charFlags)
			if (p.flags.get(s) != null)
				if (p.flags.get(s))
					fString = fString+s+";";

		String eString = "";
		for (String s : Flags.charEffects)
			if (p.effects.get(s) != null)
				if (p.effects.get(s))
					eString = eString+s+";";
		
		String lString = "";
		for (Lootgroup l : p.sells)
			lString = lString+l.id+";";
			
		String tString = "";
		for (Trigger t : p.triggers)
			tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";"+t.mprog.id+";";

		try
		{
			dbQuery.executeUpdate("UPDATE char_protos SET char_proto_name = '"+dbSafe(p.name)+"', "+
					"char_proto_short = '"+dbSafe(p.shortName)+"', "+
					"char_proto_long = '"+dbSafe(p.longName)+"', "+
					"char_proto_description = '"+dbSafe(p.description)+"', "+
					"char_proto_triggers = '"+dbSafe(tString)+"', "+
					"char_proto_extradescs = '"+dbSafe(dString)+"', "+
					"char_proto_sex = '"+dbSafe(p.sex)+"', "+
					"char_proto_race = "+p.charRace.id+", "+
					"char_proto_class = "+p.charClass.id+", "+
					"char_proto_level = "+p.level+", "+
					"char_proto_difficulty = "+p.difficulty+", "+
					"char_proto_flags = '"+dbSafe(fString)+"', "+
					"char_proto_effects = '"+dbSafe(eString)+"', "+
					"char_proto_position = '"+dbSafe(p.position)+"', "+
					"char_proto_base_hp = "+p.baseHp+", "+
					"char_proto_base_mana = "+p.baseMana+", "+
					"char_proto_base_energy = "+p.baseEnergy+", "+
					"char_proto_base_str = "+p.baseStr+", "+
					"char_proto_base_dex = "+p.baseDex+", "+
					"char_proto_base_con = "+p.baseCon+", "+
					"char_proto_base_int = "+p.baseInt+", "+
					"char_proto_base_cha = "+p.baseCha+", "+
					"char_proto_base_arm_slash = "+p.baseArmSlash+", "+
					"char_proto_base_arm_bash = "+p.baseArmBash+", "+
					"char_proto_base_arm_pierce = "+p.baseArmPierce+", "+
					"char_proto_base_res_frost = "+p.baseResFrost+", "+
					"char_proto_base_res_fire = "+p.baseResFire+", "+
					"char_proto_base_res_lightning = "+p.baseResLightning+", "+
					"char_proto_base_res_acid = "+p.baseResAcid+", "+
					"char_proto_base_res_good = "+p.baseResGood+", "+
					"char_proto_base_res_evil = "+p.baseResEvil+", "+
					"char_proto_movement = '"+dbSafe(p.movement)+"', "+
					"char_proto_hitname = '"+dbSafe(p.hitname)+"', "+
					"char_proto_sells = '"+dbSafe(lString)+"', "+
					"char_proto_align = "+p.align+" "+
					"WHERE char_proto_id = "+p.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveCharProto: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Load all object prototypes from the database and populate the {@link
	MudMain#objProtos objProtos} global ArrayList.
	*/
	public static void loadObjProtos()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM obj_protos ORDER BY obj_proto_id");
			while (dbResult.next())
			{
				ObjProto newObjProto = new ObjProto(dbResult.getInt("obj_proto_id"));
				newObjProto.name = dbResult.getString("obj_proto_name");
				newObjProto.shortName = dbResult.getString("obj_proto_short");
				newObjProto.longName = dbResult.getString("obj_proto_long");
				newObjProto.description = dbResult.getString("obj_proto_description");

				String dString = dbResult.getString("obj_proto_extradescs");
				String tempDesc = "";
				for (String s : dString.split(";"))
				{
					if (tempDesc.length() == 0)
						tempDesc = s.replace("SPECSEMICOLON", ";");
					else
					{
						newObjProto.eds.put(tempDesc, s.replace("SPECSEMICOLON", ";"));
						tempDesc = "";
					}
				}

				String tempTriggers = dbResult.getString("obj_proto_triggers");
				int ctr = 0;
				Trigger tempTrigger = new Trigger();
				for (String s : tempTriggers.split(";", -1))
				{
					ctr++;
					switch (ctr)
					{
						case 1:
							tempTrigger = new Trigger();
							tempTrigger.type = s;
							break;
						case 2:
							tempTrigger.numArg = Fmt.getInt(s);
							break;
						case 3:
							tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
							break;
						case 4:
							tempTrigger.oprog = ObjProg.lookup(Fmt.getInt(s));
							if (tempTrigger.oprog != null)
								newObjProto.triggers.add(tempTrigger);
							ctr = 0;
							break;
					}
				}

				newObjProto.level = dbResult.getInt("obj_proto_level");
				newObjProto.cost = dbResult.getInt("obj_proto_cost");
				newObjProto.decay = dbResult.getInt("obj_proto_decay");
				newObjProto.material = dbResult.getString("obj_proto_material");
				newObjProto.type = dbResult.getString("obj_proto_type");

				String fString = dbResult.getString("obj_proto_flags");
				for (String s : Flags.objFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newObjProto.flags.put(s, true);
				
				newObjProto.setTypeFlags(dbResult.getString("obj_proto_typeflags"));
				newObjProto.value1 = dbResult.getString("obj_proto_value1");
				newObjProto.value2 = dbResult.getString("obj_proto_value2");
				newObjProto.value3 = dbResult.getString("obj_proto_value3");
				newObjProto.value4 = dbResult.getString("obj_proto_value4");
				newObjProto.value5 = dbResult.getString("obj_proto_value5");

				String sString = dbResult.getString("obj_proto_statmods");
				for (String s : sString.split(";"))
				{
					String leftRight[] = s.split(":");
					if (leftRight.length == 2)
						if (Fmt.getInt(leftRight[1]) > 0)
							newObjProto.statMods.put(leftRight[0], Fmt.getInt(leftRight[1]));
				}

				String eString = dbResult.getString("obj_proto_effects");
				for (String s : Flags.objEffects)
					if (eString.indexOf(";"+s+";") > -1 || eString.startsWith(s+";"))
						newObjProto.effects.put(s, true);

				MudMain.objProtos.add(newObjProto);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadObjProtos: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Attempt to create a new object prototype in the database using the given ID as
	its new ID.
	<p>
	The method first checks for an existing prototype in the database with the same
	ID. If one is found, it will return {@code false} and the prototype will not be
	created.
	
	@param newId The ID to assign to the new object prototype.
	@return {@code true} if the object prototype was created without conflict;
		{@code false} otherwise.
	*/
	public static boolean newObjProto(int newId)
	{
		try
		{
			// Check for a duplicate object prototype ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM obj_protos WHERE obj_proto_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO obj_protos VALUES("+newId+", 'newobj', 'a new object', 'A new object is here being nondescript.', '', '', '', 0, 0, 0, '"+Flags.objMaterials[0]+"', 'none', '', '', '', '', '', '', '', '', '')");
			ObjProto newOp = new ObjProto(newId);
			newOp.name = "newobj";
			newOp.shortName = "a new object";
			newOp.longName = "A new object is here being nondescript.";
			newOp.description = "";
			newOp.material = Flags.objMaterials[0];
			newOp.type = "none";

			objProtos.add(newOp);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newObjProto: "+e.getMessage());
			logException(e);
		}
		return false;
	}

	/**
	Save the given object prototype to the database.
	
	@param p The object prototype to save to the database.
	*/
	public static void saveObjProto(ObjProto p)
	{
		String dString = "";
		for (String d : p.eds.keySet())
			dString = dString+d.replace(";", "SPECSEMICOLON")+";"+p.eds.get(d).replace(";", "SPECSEMICOLON")+";";

		String tString = "";
		for (Trigger t : p.triggers)
			tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";"+t.oprog.id+";";

		String fString = "";
		for (String s : Flags.objFlags)
			if (p.flags.get(s) != null)
				if (p.flags.get(s))
					fString = fString+s+";";
		
		String tfString = "";
		for (String s : p.typeFlags.keySet())
			if (p.typeFlags.get(s))
				tfString = tfString+s+";";

		String eString = "";
		for (String s : Flags.objEffects)
			if (p.effects.get(s))
				eString = eString+s+";";

		String sString = "";
		for (String s : p.statMods.keySet())
			sString = sString+s+":"+p.statMods.get(s)+";";

		try
		{
			dbQuery.executeUpdate("UPDATE obj_protos SET obj_proto_name = '"+dbSafe(p.name)+"', "+
					"obj_proto_short = '"+dbSafe(p.shortName)+"', "+
					"obj_proto_long = '"+dbSafe(p.longName)+"', "+
					"obj_proto_description = '"+dbSafe(p.description)+"', "+
					"obj_proto_extradescs = '"+dbSafe(dString)+"', "+
					"obj_proto_triggers = '"+dbSafe(tString)+"', "+
					"obj_proto_level = "+p.level+", "+
					"obj_proto_cost = "+p.cost+", "+
					"obj_proto_decay = "+p.decay+", "+
					"obj_proto_material = '"+dbSafe(p.material)+"', "+
					"obj_proto_type = '"+dbSafe(p.type)+"', "+
					"obj_proto_flags = '"+dbSafe(fString)+"', "+
					"obj_proto_typeflags = '"+dbSafe(tfString)+"', "+
					"obj_proto_value1 = '"+dbSafe(p.value1)+"', "+
					"obj_proto_value2 = '"+dbSafe(p.value2)+"', "+
					"obj_proto_value3 = '"+dbSafe(p.value3)+"', "+
					"obj_proto_value4 = '"+dbSafe(p.value4)+"', "+
					"obj_proto_value5 = '"+dbSafe(p.value5)+"', "+
					"obj_proto_statmods = '"+dbSafe(sString)+"', "+
					"obj_proto_effects = '"+dbSafe(eString)+"' "+
					"WHERE obj_proto_id = "+p.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveObjProto: "+e.getMessage());
			logException(e);
		}
	}
	
	

	/**
	Load all resets from the database and populate the {@link MudMain#roomResets
	roomResets} and {@link MudMain#resetResets resetResets} global ArrayLists.
	*/
	public static void loadResets()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM resets ORDER BY reset_location, reset_order");
			while (dbResult.next())
			{
				Reset newReset = new Reset(dbResult.getInt("reset_id"));
				newReset.location = Room.lookup(dbResult.getInt("reset_location"));
				if (newReset.location == null)
				{
					sysLog("bugs", "Reset Loading Error: "+newReset.location+" is not a valid room.");
					continue;
				}
				newReset.type = dbResult.getString("reset_type");
				newReset.subject = dbResult.getInt("reset_subject");
				newReset.count = dbResult.getInt("reset_count");
				newReset.location.resets.add(dbResult.getInt("reset_order"), newReset);
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in loadResets: "+e.getMessage());
			logException(e);
		}
	}
	
	/**
	Create a new reset in the database, then set the new reset's ID to the ID
	generated by the database.
	
	@param r The reset to create in the database and assign the new ID to.
	*/
	public static void newReset(Reset r)
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO resets VALUES(NULL, '"+r.type+"', "+r.location.id+", "+r.location.resets.lastIndexOf(r)+", "+r.subject+", "+r.count+")");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(reset_id) AS new_id FROM resets");
			dbResult.next();
			r.id = dbResult.getInt("new_id");
		} catch (Exception e) {
			sysLog("bugs", "Error in newReset: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveReset(Reset r)
	{
		try
		{
			dbQuery.executeUpdate("UPDATE resets SET "+
					"reset_order = "+r.location.resets.lastIndexOf(r)+" "+
					"WHERE reset_id = "+r.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveReset: "+e.getMessage());
			logException(e);
		}
	}

	public static void deleteReset(Reset r)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM resets WHERE reset_id = "+r.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in deleteReset: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void loadQuests()
	{
		try
		{
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM quests ORDER BY quest_id");
			while (dbResult.next())
			{
				Quest newQ = new Quest(dbResult.getInt("quest_id"));
				newQ.name = dbResult.getString("quest_name");
				newQ.description = dbResult.getString("quest_description");

				String codeLines[] = dbResult.getString("quest_check").split("\\^/");
				for (String l : codeLines)
					newQ.check.code.add(l.replace("SPEC_NEWLINE", "^/"));

				codeLines = dbResult.getString("quest_offer").split("\\^/");
				for (String l : codeLines)
					newQ.offer.code.add(l.replace("SPEC_NEWLINE", "^/"));

				codeLines = dbResult.getString("quest_accept").split("\\^/");
				for (String l : codeLines)
					newQ.accept.code.add(l.replace("SPEC_NEWLINE", "^/"));

				codeLines = dbResult.getString("quest_complete").split("\\^/");
				for (String l : codeLines)
					newQ.complete.code.add(l.replace("SPEC_NEWLINE", "^/"));
				
				newQ.minLevel = dbResult.getInt("quest_minlevel");
				newQ.maxLevel = dbResult.getInt("quest_maxlevel");
				
				String pString[] = dbResult.getString("quest_prereqs").split(";", -1);
				for (String s : pString)
					newQ.prereqs.add(Fmt.getInt(s));

				newQ.difficulty = dbResult.getInt("quest_difficulty");
				
				String fString = dbResult.getString("quest_flags");
				for (String s : Flags.questFlags)
					if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
						newQ.flags.put(s, true);
				
				ResultSet qoResult = dbQuery.executeQuery("SELECT * FROM q_objectives WHERE qo_quest = "+newQ.id+" ORDER BY qo_order");
				while (qoResult.next())
				{
					QuestObjective newQo = new QuestObjective(qoResult.getInt("qo_id"));
					newQo.name = qoResult.getString("qo_name");
					newQo.description = qoResult.getString("qo_description");

					codeLines = qoResult.getString("qo_start").split("\\^/");
					for (String l : codeLines)
						newQo.start.code.add(l.replace("SPEC_NEWLINE", "^/"));

					codeLines = qoResult.getString("qo_end").split("\\^/");
					for (String l : codeLines)
						newQo.end.code.add(l.replace("SPEC_NEWLINE", "^/"));
					
					String tempAct = qoResult.getString("qo_activities");
					int ctr = 0;
					for (String s : tempAct.split(";", -1))
					{
						ctr++;
						switch (ctr)
						{
							case 1:
								newQo.objType.add(s);
								break;
							case 2:
								newQo.objId.add(Fmt.getInt(s));
								break;
							case 3:
								newQo.objCount.add(Fmt.getInt(s));
								ctr = 0;
								break;
						}
					}

					String tempTriggers = qoResult.getString("qo_triggers");
					ctr = 0;
					Trigger tempTrigger = new Trigger();
					for (String s : tempTriggers.split(";", -1))
					{
						ctr++;
						switch (ctr)
						{
							case 1:
								tempTrigger = new Trigger();
								tempTrigger.type = s;
								break;
							case 2:
								tempTrigger.numArg = Fmt.getInt(s);
								break;
							case 3:
								tempTrigger.arg = s.replace("SPECSEMICOLON", ";");
								tempTrigger.qo = newQo;
								newQo.triggers.add(tempTrigger);
								ctr = 0;
								break;
						}
					}

					codeLines = qoResult.getString("qo_script").split("\\^/");
					for (String l : codeLines)
						newQo.script.code.add(l.replace("SPEC_NEWLINE", "^/"));

					codeLines = qoResult.getString("qo_check").split("\\^/");
					for (String l : codeLines)
						newQo.check.code.add(l.replace("SPEC_NEWLINE", "^/"));
					
					fString = qoResult.getString("qo_flags");
					for (String s : Flags.questObjectiveFlags)
						if (fString.indexOf(";"+s+";") > -1 || fString.startsWith(s+";"))
							newQo.flags.put(s, true);
					
					newQ.objectives.add(newQo);
				}
				
				quests.add(newQ);
			}

		} catch (Exception e) {
			sysLog("bugs", "Error in loadQuests: "+e.getMessage());
			logException(e);
		}
	}

	public static boolean newQuest(int newId)
	{
		try
		{
			// Check for a duplicate quest ID.
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM quests WHERE quest_id = "+newId);
			if (dbResult.next())
				return false;
			
			dbQuery.executeUpdate("INSERT INTO quests VALUES("+newId+", 'A New Quest', '', '', '', '', '', 0, 0, '', 0, '')");
			Quest newQ = new Quest(newId);
			newQ.name = "A New Quest";
			quests.add(newQ);
			return true;
		} catch (Exception e) {
			sysLog("bugs", "Error in newQuest: "+e.getMessage());
			logException(e);
		}
		return false;
	}

	public static void newQuestObjective(Quest q, int order)
	{
		try
		{
			dbQuery.executeUpdate("INSERT INTO q_objectives VALUES(NULL, "+q.id+", 'A New Quest Objective', '', '', '', '', '', '', '', '', "+order+")");
			ResultSet dbResult = dbQuery.executeQuery("SELECT MAX(qo_id) AS new_id FROM q_objectives");
			dbResult.next();
			QuestObjective newQo = new QuestObjective(dbResult.getInt("new_id"));
			newQo.name = "A New Quest Objective";
			q.objectives.add(newQo);
			moveQuestObjective(q, newQo, order);
		} catch (Exception e) {
			sysLog("bugs", "Error in newQuestObjective: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void moveQuestObjective(Quest q, QuestObjective qo, int newPos)
	{
		try
		{
			dbQuery.executeUpdate("UPDATE q_objectives SET qo_order = "+newPos+" WHERE qo_id = "+qo.id);
			ResultSet dbResult = dbQuery.executeQuery("SELECT * FROM q_objectives WHERE qo_id != "+qo.id+" ORDER BY qo_order");
			int ctr = 0;
			while (dbResult.next())
			{
				ctr++;
				if (ctr == newPos)
					ctr++;
				dbQuery.executeUpdate("UPDATE q_objectives SET qo_order = "+ctr+" WHERE qo_id = "+dbResult.getInt("qo_id"));
			}
		} catch (Exception e) {
			sysLog("bugs", "Error in moveQuestObjective: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveQuest(Quest q)
	{
		String checkString = "";
		for (String s : q.check.code)
			checkString = checkString+"^/"+s;
		if (checkString.length() > 2)
			checkString = checkString.substring(2);

		String offerString = "";
		for (String s : q.offer.code)
			offerString = offerString+"^/"+s;
		if (offerString.length() > 2)
			offerString = offerString.substring(2);

		String acceptString = "";
		for (String s : q.accept.code)
			acceptString = acceptString+"^/"+s;
		if (acceptString.length() > 2)
			acceptString = acceptString.substring(2);

		String completeString = "";
		for (String s : q.accept.code)
			completeString = completeString+"^/"+s;
		if (completeString.length() > 2)
			completeString = completeString.substring(2);

		String pString = "";
		for (Integer i : q.prereqs)
			pString = pString+i+";";

		String fString = "";
		for (String s : Flags.questFlags)
			if (q.flags.get(s) != null)
				if (q.flags.get(s))
					fString = fString+s+";";
		try
		{
			dbQuery.executeUpdate("UPDATE quests SET "+
					"quest_name = '"+dbSafe(q.name)+"', "+
					"quest_description = '"+dbSafe(q.description)+"', "+
					"quest_check = '"+dbSafe(checkString)+"', "+
					"quest_offer = '"+dbSafe(offerString)+"', "+
					"quest_accept = '"+dbSafe(acceptString)+"', "+
					"quest_complete = '"+dbSafe(completeString)+"', "+
					"quest_minlevel = "+q.minLevel+", "+
					"quest_maxlevel = "+q.maxLevel+", "+
					"quest_prereqs = '"+dbSafe(pString)+"', "+
					"quest_difficulty = "+q.difficulty+", "+
					"quest_flags = '"+dbSafe(fString)+"' "+
					"WHERE quest_id = "+q.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveQuest: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void saveQuestObjective(QuestObjective qo)
	{
		String startString = "";
		for (String s : qo.start.code)
			startString = startString+"^/"+s;
		if (startString.length() > 2)
			startString = startString.substring(2);

		String endString = "";
		for (String s : qo.end.code)
			endString = endString+"^/"+s;
		if (endString.length() > 2)
			endString = endString.substring(2);
		
		String aString = "";
		for (int ctr = 0; ctr < qo.objType.size(); ctr++)
			aString = aString+qo.objType.get(ctr)+";"+qo.objId.get(ctr)+";"+qo.objCount.get(ctr)+";";

		String tString = "";
		for (Trigger t : qo.triggers)
			tString = tString+t.type+";"+t.numArg+";"+t.arg.replace(";", "SPECSEMICOLON")+";";

		String scriptString = "";
		for (String s : qo.script.code)
			scriptString = scriptString+"^/"+s;
		if (scriptString.length() > 2)
			scriptString = scriptString.substring(2);

		String checkString = "";
		for (String s : qo.check.code)
			checkString = checkString+"^/"+s;
		if (checkString.length() > 2)
			checkString = checkString.substring(2);

		String fString = "";
		for (String s : Flags.questObjectiveFlags)
			if (qo.flags.get(s) != null)
				if (qo.flags.get(s))
					fString = fString+s+";";
		try
		{
			dbQuery.executeUpdate("UPDATE q_objectives SET "+
					"qo_name = '"+dbSafe(qo.name)+"', "+
					"qo_description = '"+dbSafe(qo.description)+"', "+
					"qo_start = '"+dbSafe(startString)+"', "+
					"qo_end = '"+dbSafe(endString)+"', "+
					"qo_activities = '"+dbSafe(aString)+"', "+
					"qo_triggers = '"+dbSafe(tString)+"', "+
					"qo_script = '"+dbSafe(scriptString)+"', "+
					"qo_check = '"+dbSafe(checkString)+"', "+
					"qo_flags = '"+dbSafe(fString)+"', "+
					"WHERE qo_id = "+qo.id);
		} catch (Exception e) {
			sysLog("bugs", "Error in saveQuestObjective: "+e.getMessage());
			logException(e);
		}
	}
	
	public static void deleteQuest(Quest q)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM quests WHERE quest_id = "+q.id);
			dbQuery.executeUpdate("DELETE FROM q_objectives WHERE qo_quest = "+q.id);
			dbQuery.executeUpdate("DELETE FROM q_progress WHERE qp_quest = "+q.id);
			for (QuestObjective qo : q.objectives)
				dbQuery.executeUpdate("DELETE FROM q_progress WHERE qp_objective = "+qo.id);

			quests.remove(q);
			for (CharData ch : mobs)
				ch.offers.remove(q);
			for (ObjData o : ObjData.allObjects())
				o.offers.remove(q);
			for (Room r : rooms)
				if (r.offers.remove(q))
					saveRoom(r);
			for (ObjProto op : objProtos)
				if (op.offers.remove(q))
					saveObjProto(op);
			for (CharProto cp : charProtos)
				if (cp.offers.remove(q))
					saveCharProto(cp);
			for (CharData ch : allChars())
			{
				ch.completed.remove(q);
				for (QuestObjective qo : q.objectives)
					ch.progress.remove(qo);
			}
			for (Quest qs : quests)
				if (qs.prereqs.remove((Object)q.id))
					saveQuest(qs);

		} catch (Exception e) {
			sysLog("bugs", "Error in deleteQuest: "+e.getMessage());
			logException(e);
		}
	}

	public static void deleteQuestObjective(Quest q, QuestObjective qo)
	{
		try
		{
			dbQuery.executeUpdate("DELETE FROM q_objectives WHERE qo_id = "+qo.id);
			dbQuery.executeUpdate("DELETE FROM q_progress WHERE qp_objective = "+qo.id);

			q.objectives.remove(qo);
			for (CharData ch : allChars())
				ch.progress.remove(qo);

		} catch (Exception e) {
			sysLog("bugs", "Error in deleteQuestObjective: "+e.getMessage());
			logException(e);
		}
	}

	/**
	Replace all single quotes in the string with a pair of single quotes so that it
	doesn't interfere with SQL query syntax.
	
	@param text The string to filter.
	@return The contents of {@code text} with all single quotes replaced with pairs
		of single quotes.
	*/
	public static String dbSafe(String text)
	{
		text = text.replace("'", "''");
		text = text.replace("\\", "\\\\");
		return text;
	}
	public static String dbSafeDebug(String name, String text)
	{
		sysLog("bugs", "DbSafing: "+name);
		text = text.replace("'", "''");
		text = text.replace("\\", "\\\\");
		return text;
	}
	
	/**
	Connect to the database and set up the connection for use in other methods.
	<p>
	The method will automatically use the test database if the game isn't using
	the standard port.
	*/
	public static void initDb() throws Exception
	{
		// Use the test copy if this isn't the main Agape port.
		/*if (portNr != 1336)
		{
			dbName = "AgapeMUD_TEST";
		}*/

		Class.forName("com.mysql.jdbc.Driver");
		dbCon = DriverManager.getConnection(dbUrl+"/"+dbName, dbUser, dbPass);
		dbQuery = dbCon.createStatement();
	}
}